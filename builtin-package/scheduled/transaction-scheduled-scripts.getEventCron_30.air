; This file is auto-generated. Do not edit manually: changes may be erased.
; Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
; If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
; Aqua version: 0.9.1-0.9.2

(new $cron_datas
 (seq
  (call %init_peer_id% ("transaction" "get_active_crons") [] results)
  (xor
   (match results.$.success! true
    (seq
     (seq
      (seq
       (seq
        (seq
         (call %init_peer_id% ("op" "array_length") [results.$.crons!] cron_length)
         (par
          (fold results.$.crons! result-0
           (par
            (new $evm_logs
             (seq
              (seq
               (seq
                (seq
                 (seq
                  (seq
                   (ap result-0 $cron_datas)
                   (call %init_peer_id% ("transaction" "get_cron_latest_block") [result-0.$.hash!] get_cron_latest_block)
                  )
                  (call %init_peer_id% ("fevm_json_rpc" "decimal_to_hex") [get_cron_latest_block] decimal_to_hex)
                 )
                 (xor
                  (match result-0.$.token_type! "erc1155"
                   (xor
                    (mismatch result-0.$.abi_url! ""
                     (xor
                      (mismatch result-0.$.topic! ""
                       (seq
                        (new $array-inline
                         (seq
                          (ap result-0.$.topic! $array-inline)
                          (canon %init_peer_id% $array-inline  #array-inline-0)
                         )
                        )
                        (call %init_peer_id% ("fevm_json_rpc" "eth_get_logs") [result-0.$.node_url! result-0.$.abi_url! decimal_to_hex "latest" result-0.$.address! #array-inline-0] $evm_logs)
                       )
                      )
                      (call %init_peer_id% ("fevm_json_rpc" "eth_get_logs") [result-0.$.node_url! result-0.$.abi_url! decimal_to_hex "latest" result-0.$.address! []] $evm_logs)
                     )
                    )
                    (xor
                     (mismatch result-0.$.topic! ""
                      (seq
                       (new $array-inline-1
                        (seq
                         (ap result-0.$.topic! $array-inline-1)
                         (canon %init_peer_id% $array-inline-1  #array-inline-1-0)
                        )
                       )
                       (call %init_peer_id% ("fevm_json_rpc" "eth_get_logs") [result-0.$.node_url! "https://ipfs.xfero.io/ipfs/QmSiZUtqkbEZPPFMN9ZihSbPskNxqkjBpAfB2NmwLv11N7?filename=CollaBeatNFT-abi.json" decimal_to_hex "latest" result-0.$.address! #array-inline-1-0] $evm_logs)
                      )
                     )
                     (call %init_peer_id% ("fevm_json_rpc" "eth_get_logs") [result-0.$.node_url! "https://ipfs.xfero.io/ipfs/QmSiZUtqkbEZPPFMN9ZihSbPskNxqkjBpAfB2NmwLv11N7?filename=CollaBeatNFT-abi.json" decimal_to_hex "latest" result-0.$.address! []] $evm_logs)
                    )
                   )
                  )
                  (call %init_peer_id% ("op" "noop") [])
                 )
                )
                (xor
                 (match result-0.$.token_type! "erc721"
                  (xor
                   (mismatch result-0.$.abi_url! ""
                    (xor
                     (mismatch result-0.$.topic! ""
                      (seq
                       (new $array-inline-2
                        (seq
                         (ap result-0.$.topic! $array-inline-2)
                         (canon %init_peer_id% $array-inline-2  #array-inline-2-0)
                        )
                       )
                       (call %init_peer_id% ("fevm_json_rpc" "eth_get_logs") [result-0.$.node_url! result-0.$.abi_url! decimal_to_hex "latest" result-0.$.address! #array-inline-2-0] $evm_logs)
                      )
                     )
                     (call %init_peer_id% ("fevm_json_rpc" "eth_get_logs") [result-0.$.node_url! result-0.$.abi_url! decimal_to_hex "latest" result-0.$.address! []] $evm_logs)
                    )
                   )
                   (xor
                    (mismatch result-0.$.topic! ""
                     (seq
                      (new $array-inline-3
                       (seq
                        (ap result-0.$.topic! $array-inline-3)
                        (canon %init_peer_id% $array-inline-3  #array-inline-3-0)
                       )
                      )
                      (call %init_peer_id% ("fevm_json_rpc" "eth_get_logs") [result-0.$.node_url! "https://ipfs.xfero.io/ipfs/QmWmkDbQ9KA6yLR8C8TuavLwyk2g6TfHyixG5gwTRem3Nw?filename=ERC721_0x3Zero-abi.json" decimal_to_hex "latest" result-0.$.address! #array-inline-3-0] $evm_logs)
                     )
                    )
                    (call %init_peer_id% ("fevm_json_rpc" "eth_get_logs") [result-0.$.node_url! "https://ipfs.xfero.io/ipfs/QmWmkDbQ9KA6yLR8C8TuavLwyk2g6TfHyixG5gwTRem3Nw?filename=ERC721_0x3Zero-abi.json" decimal_to_hex "latest" result-0.$.address! []] $evm_logs)
                   )
                  )
                 )
                 (call %init_peer_id% ("op" "noop") [])
                )
               )
               (canon %init_peer_id% $evm_logs  #evm_logs_canon)
              )
              (fold #evm_logs_canon log-0
               (seq
                (new $datas
                 (seq
                  (seq
                   (seq
                    (seq
                     (seq
                      (call %init_peer_id% ("op" "array_length") [log-0] n)
                      (par
                       (fold log-0 llog-0
                        (par
                         (seq
                          (seq
                           (call %init_peer_id% ("transaction" "deserialize_fork") [llog-0.$.data!] deserialize_fork)
                           (xor
                            (mismatch deserialize_fork.$.data! ""
                             (xor
                              (mismatch deserialize_fork.$.data! "00"
                               (seq
                                (seq
                                 (new $array-inline-4
                                  (seq
                                   (seq
                                    (ap "string" $array-inline-4)
                                    (ap "bytes" $array-inline-4)
                                   )
                                   (canon %init_peer_id% $array-inline-4  #array-inline-4-0)
                                  )
                                 )
                                 (call %init_peer_id% ("fevm_json_rpc" "decode_abi") [#array-inline-4-0 deserialize_fork.$.data!] decode_abi)
                                )
                                (xor
                                 (seq
                                  (call %init_peer_id% ("op" "array_length") [decode_abi] array_length)
                                  (match array_length 2
                                   (seq
                                    (seq
                                     (call %init_peer_id% ("transaction" "get_meta_contract_by_id") [result-0.$.meta_contract_id!] get_meta_contract_by_id)
                                     (call %init_peer_id% ("transaction" "generate_data_key") [result-0.$.chain! result-0.$.address! deserialize_fork.$.token_id!] generate_data_key)
                                    )
                                    (xor
                                     (match get_meta_contract_by_id.$.success! true
                                      (seq
                                       (call %init_peer_id% (get_meta_contract_by_id.$.meta.meta_contract_id! "on_mint") [get_meta_contract_by_id.$.meta! generate_data_key deserialize_fork.$.token_id! decode_abi.$.[1]!] on_mint)
                                       (xor
                                        (match on_mint.$.result! true
                                         (seq
                                          (seq
                                           (seq
                                            (seq
                                             (call %init_peer_id% ("transaction" "get_registry_by_id") ["0x01"] get_registry_by_id)
                                             (xor
                                              (match get_registry_by_id.$.success! true
                                               (seq
                                                (call %init_peer_id% ("transaction" "get_meta_contract_by_id") [get_registry_by_id.$.registry.meta_contract_id!] get_meta_contract_by_id-0)
                                                (xor
                                                 (match get_meta_contract_by_id-0.$.success! true
                                                  (seq
                                                   (call %init_peer_id% (get_registry_by_id.$.registry.meta_contract_id! "on_post_mint") [on_mint.$.metadatas! get_meta_contract_by_id-0.$.meta! generate_data_key result-0.$.address! result-0.$.chain! deserialize_fork.$.token_id!] on_post_mint)
                                                   (call %init_peer_id% ("transaction" "set_metadata_cron") ["0x01" result-0 deserialize_fork.$.token_id! on_post_mint.$.result! on_post_mint.$.metadatas!] set_metadata_cron)
                                                  )
                                                 )
                                                 (call %init_peer_id% ("op" "noop") [])
                                                )
                                               )
                                              )
                                              (call %init_peer_id% ("transaction" "set_metadata_cron") [get_meta_contract_by_id.$.meta.meta_contract_id! result-0 deserialize_fork.$.token_id! on_mint.$.result! on_mint.$.metadatas!] set_metadata_cron-0)
                                             )
                                            )
                                            (call %init_peer_id% ("transaction" "send_cron_tx") [result-0.$.hash! llog-0.$.data! llog-0.$.block_number! llog-0.$.transaction_hash! deserialize_fork.$.token_id!] send_cron_tx)
                                           )
                                           (call %init_peer_id% ("transaction" "get_meta_contract") [result-0.$.token_key!] get_meta_contract)
                                          )
                                          (xor
                                           (match get_meta_contract.$.success! true
                                            (seq
                                             (call %init_peer_id% (get_meta_contract.$.meta.meta_contract_id! "on_mint") [get_meta_contract.$.meta! generate_data_key deserialize_fork.$.token_id! decode_abi.$.[1]!] on_mint-0)
                                             (xor
                                              (match on_mint-0.$.result! true
                                               (seq
                                                (call %init_peer_id% ("transaction" "set_metadata_cron") [get_meta_contract.$.meta.meta_contract_id! result-0 deserialize_fork.$.token_id! on_mint-0.$.result! on_mint-0.$.metadatas!] set_metadata_cron-1)
                                                (call %init_peer_id% ("transaction" "send_cron_tx") [result-0.$.hash! llog-0.$.data! llog-0.$.block_number! llog-0.$.transaction_hash! deserialize_fork.$.token_id!] send_cron_tx-0)
                                               )
                                              )
                                              (call %init_peer_id% ("op" "noop") [])
                                             )
                                            )
                                           )
                                           (call %init_peer_id% ("op" "noop") [])
                                          )
                                         )
                                        )
                                        (call %init_peer_id% ("op" "noop") [])
                                       )
                                      )
                                     )
                                     (call %init_peer_id% ("op" "noop") [])
                                    )
                                   )
                                  )
                                 )
                                 (call %init_peer_id% ("op" "noop") [])
                                )
                               )
                              )
                              (call %init_peer_id% ("op" "noop") [])
                             )
                            )
                            (seq
                             (call %init_peer_id% ("transaction" "get_meta_contract_by_id") [result-0.$.meta_contract_id!] get_meta_contract_by_id-1)
                             (xor
                              (match get_meta_contract_by_id-1.$.success! true
                               (seq
                                (call %init_peer_id% (get_meta_contract_by_id-1.$.meta.meta_contract_id! "on_event") [llog-0 get_meta_contract_by_id-1.$.meta!] on_event)
                                (xor
                                 (match on_event.$.result! true
                                  (seq
                                   (call %init_peer_id% ("transaction" "set_metadata_cron") ["0x01" result-0 on_event.$.token_id! on_event.$.result! on_event.$.metadatas!] set_metadata_cron-2)
                                   (call %init_peer_id% ("transaction" "send_cron_tx") [result-0.$.hash! llog-0.$.data! llog-0.$.block_number! llog-0.$.transaction_hash! on_event.$.token_id!] send_cron_tx-1)
                                  )
                                 )
                                 (call %init_peer_id% ("op" "noop") [])
                                )
                               )
                              )
                              (call %init_peer_id% ("op" "noop") [])
                             )
                            )
                           )
                          )
                          (ap llog-0 $datas)
                         )
                         (next llog-0)
                        )
                        (never)
                       )
                       (null)
                      )
                     )
                     (call %init_peer_id% ("math" "sub") [n 1] sub-0)
                    )
                    (call %init_peer_id% ("math" "sub") [n 1] sub)
                   )
                   (new $datas_test
                    (seq
                     (seq
                      (seq
                       (call %init_peer_id% ("math" "add") [sub 1] datas_incr)
                       (fold $datas s
                        (seq
                         (seq
                          (ap s $datas_test)
                          (canon %init_peer_id% $datas_test  #datas_iter_canon)
                         )
                         (xor
                          (match #datas_iter_canon.length datas_incr
                           (null)
                          )
                          (next s)
                         )
                        )
                        (never)
                       )
                      )
                      (canon %init_peer_id% $datas_test  #datas_result_canon)
                     )
                     (ap #datas_result_canon datas_gate)
                    )
                   )
                  )
                  (ap datas_gate.$.[sub-0]! datas_gate-0)
                 )
                )
                (next log-0)
               )
              )
             )
            )
            (next result-0)
           )
           (never)
          )
          (null)
         )
        )
        (call %init_peer_id% ("math" "sub") [cron_length 1] sub-2)
       )
       (call %init_peer_id% ("math" "sub") [cron_length 1] sub-1)
      )
      (new $cron_datas_test
       (seq
        (seq
         (seq
          (call %init_peer_id% ("math" "add") [sub-1 1] cron_datas_incr)
          (fold $cron_datas s
           (seq
            (seq
             (ap s $cron_datas_test)
             (canon %init_peer_id% $cron_datas_test  #cron_datas_iter_canon)
            )
            (xor
             (match #cron_datas_iter_canon.length cron_datas_incr
              (null)
             )
             (next s)
            )
           )
           (never)
          )
         )
         (canon %init_peer_id% $cron_datas_test  #cron_datas_result_canon)
        )
        (ap #cron_datas_result_canon cron_datas_gate)
       )
      )
     )
     (ap cron_datas_gate.$.[sub-2]! cron_datas_gate-0)
    )
   )
   (call %init_peer_id% ("op" "noop") [])
  )
 )
)
